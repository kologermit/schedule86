import telebot, excel_reader, config, mysql.connector, json, get_weather, os, urllib, requests, time
from telebot import types
from datetime import datetime
from DB import DB
from copy import copy as copy_object
from threading import Thread
from time import sleep

bot = telebot.TeleBot(config.TOKEN)
database = DB(config.mysql)
bot.send_message(847721936, "Start Bot") #847721936
is_exit = False

from sys import exit
from signal import signal, SIGTERM, SIGINT

def exitHandler(signal_received, frame):
    # Handle any cleanup here
    global is_exit
    is_exit = True
    print('SIGTERM or CTRL-C detected. Exiting gracefully')
    exit(0)

signal(SIGTERM, exitHandler)
signal(SIGINT, exitHandler)

def json_loads(data):
    try:
        return json.loads(data)
    except:
        return None

def get_user(message):
    data = database.select('users', ['id', 'name', 'status', 'settings'], [['id', '=', message.chat.id]], 1)
    if (data):
        return {"id": data[0][0], "name": data[0][1], "status": data[0][2], "settings": json.loads(data[0][3])}
    else:
        database.insert('users', ['id', 'name', 'status', 'settings'], [[message.chat.id, message.chat.first_name, 'menu', '{\"subscribe\": [], \"commands\": []}']])
        return {"id": message.chat.id, "name": message.chat.first_name, "status": 'menu', "settings": {"subscribe": [], "commands": []}}

def log(message, user):
    query = "INSERT INTO log (text) VALUES (%s)"
    
def weekday(text):
    return ({
        "–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö": "–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö",
        "–í–¢–û–†–ù–ò–ö": "–í–¢–û–†–ù–ò–ö",
        "–°–†–ï–î–ê": "–°–†–ï–î–ê",
        "–ß–ï–¢–í–ï–†–ì": "–ß–ï–¢–í–ï–†–ì",
        "–ü–Ø–¢–ù–ò–¶–ê": "–ü–Ø–¢–ù–ò–¶–ê",
        "–°–£–ë–ë–û–¢–ê": "–°–£–ë–ë–û–¢–ê",
        "–ü–ù": "–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö",
        "–í–¢": "–í–¢–û–†–ù–ò–ö",
        "–°–†": "–°–†–ï–î–ê",
        "–ß–¢": "–ß–ï–¢–í–ï–†–ì",
        "–ü–¢": "–ü–Ø–¢–ù–ò–¶–ê",
        "–°–ë": "–°–£–ë–ë–û–¢–ê",
        "–í–°–Ø –ù–ï–î–ï–õ–Ø": "–í–°–Ø –ù–ï–î–ï–õ–Ø",
        "–í–ù": "–í–°–Ø –ù–ï–î–ï–õ–Ø",
        "1": "–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö",
        "2": "–í–¢–û–†–ù–ò–ö",
        "3": "–°–†–ï–î–ê",
        "4": "–ß–ï–¢–í–ï–†–ì",
        "5": "–ü–Ø–¢–ù–ò–¶–ê",
        "6": "–°–£–ë–ë–û–¢–ê",
    }).get(str(text).upper())

def user_update(user, status=None, settings=None):
    if status and not settings:
        database.update('users', {'status': status}, [['id', '=', user['id']]])
    elif settings and not status:
        database.update('users', {'settings': settings}, [['id', '=', user['id']]])
    else:
        database.update('users', {'status': status, 'settings': settings}, [['id', '=', user['id']]])

def markups(buttons):
    buttons.append("–ú–µ–Ω—é")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    b = []
    for i in buttons:
        b.append(types.KeyboardButton(i))
    markup.add(*b)
    return markup

def is_class(text, database):
    if len(text) == 2:
        if text[0].isdigit():
            if int(text[0]) >= 5:
                classes = database.select("config", "data", [["theme", "=", "classes"]])
                if not classes:
                    return None
                classes = json_loads(classes[0][0])
                if not classes or type(classes) != type({}):
                    return None
                if text[1] in classes[text[0]]:
                    return {
                        "parallel": int(text[0]),
                        "symbol": text[1]
                    }
    elif len(text) == 3:
        if text[0:2].isdigit():
            if int(text[0:2]) >= 10 and int(text[0:2]) <= 11:
                classes = database.select("config", "data", [["theme", "=", "classes"]])
                if not classes:
                    return None
                classes = json_loads(classes[0][0])
                if not classes or type(classes) != type({}):
                    return None
                if text[2] in classes[text[0:2]]:
                    return {
                        "parallel": int(text[0:2]),
                        "symbol": text[1]
                    }

def menu_markups(user):
    answer = markups(["–£—Ä–æ–∫–∏üìÖ", "–ó–≤–æ–Ω–∫–∏üîî", "–ö–∞–Ω–∏–∫—É–ª—ãüéÖ", "–ò–Ω—Ñ–æ‚Ñπ", "–ì–¥–µ –§–ö?‚öΩ", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è"])
    b = []
    for i in user["settings"]["commands"]:
        b.append(types.KeyboardButton(i))
    if b:
        answer.add(*b)
    return answer
    
settings_markup = markups(["–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µüìÖ", "–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ãüìå", "–ù–∞–∑–∞–¥üîô"])

@bot.message_handler(commands=['start'])
def start_message(message):
    user = get_user(message)
    bot.send_message(message.chat.id,"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω—É–∂–Ω—É—é –¥–ª—è —É—á—ë–±—ã –≤ –ì–Æ–õ 86", reply_markup=menu_markups(user))
    log(message, user)
    user_update(user, "menu")

@bot.message_handler(commands=['restart', 'menu'])
def start_message(message):
    user = get_user(message)
    bot.send_message(message.chat.id,"–ü–µ—Ä–µ–∑–∞—Ä—è–∂–∞—é!!!!!!!!!!", reply_markup=menu_markups(user))
    log(message, user)
    user_update(user, "menu")

@bot.message_handler(commands=['t'])
def t(message):
    user = get_user(message)
    log(message, user)
    if user["status"] == "settings:commands:add":
        return MessageHandler.Settings.Commands.add(bot, message, user)
    elif user["status"] == "settings:commands:delete":
        return MessageHandler.Settings.Commands.delete(bot, message, user)
    message_data = [i for i in message.text.split(" ") if i]
    if len(message_data) == 1:
        bot.send_message(user["id"],"–í—ã –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏ —Ñ–∞–º–∏–ª–∏—é —É—á–∏—Ç–µ–ª—è")
        return True
    data = database.select("teachers", ["schedule", "name"], [["upper(name)","RLIKE",message_data[1].upper()]])
    if not data:
        bot.send_message(user["id"],"–î–∞–Ω–Ω—ã–π —É—á–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return True
    day = None
    if len(message_data) >= 3:
        day = weekday(message_data[2])
    if not day and len(message_data) >= 4:
        day = weekday(f"{message_data[2]} {message_data[3]}")
    if not day:
        day = weekday("–≤–Ω")
    data, name = json_loads(data[0][0]), data[0][1]
    if not data:
        bot.send_message(user["id"], "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–ø–∏—Å–∞–Ω–∏—è!")
        return True
    if type(data) != type({}):
        bot.send_message(user["id"], "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–ø–∏—Å–∞–Ω–∏—è!")
        return True
    if data.get("standart") is None or data.get("edited") is None:
        bot.send_message(user["id"], "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–ø–∏—Å–∞–Ω–∏—è!")
        return True
    if type(data["standart"]) != type({}) or type(data["edited"]) != type({}):
        bot.send_message(user["id"], "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–ø–∏—Å–∞–Ω–∏—è!")
        return True
    if day != "–í–°–Ø –ù–ï–î–ï–õ–Ø":
        answer = f"<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {name} –Ω–∞ {day}:\n</b>"
        for i in range(len(data['standart'][day])):
            answer += f"<b>{i})</b> {data['standart'][day][i]}\n"
        if data["edited"].get(day):
            answer += "\n<b>–ò–∑–º–µ–Ω–µ–Ω–∏—è:</b>\n"
            for i in range(len(data["edited"][day])):
                answer += f"<b>{i})</b> {data['edited'][day][i]}\n"
        else:
            answer += "\n<b>–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç</b>"
    else:
        answer = f"<b>–†–∞–ø–∏—Å–∞–Ω–∏–µ {name} –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é:</b>\n"
        for i in data["standart"]:
            answer += f"<b>{i.capitalize()}:</b>\n"
            for j in range(len(data["standart"][i])):
                answer += f"<b>{j + 1})</b> {data['standart'][i][j]}\n"
            answer += "\n"
        if data["edited"]:
            answer += "<b>–ò–∑–º–µ–Ω–µ–Ω–∏—è:</b>\n"
            for i in data["edited"]:
                answer += f"<b>{i.capitalize()}:</b>\n"
                for j in range(len(data["edited"][i])):
                    answer += f"<b>{j + 1})</b> {data['edited'][i][j]}\n"
                answer += "\n"
        else:
            answer += "<b>–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç</b>"
    bot.send_message(user["id"], answer, parse_mode="HTML", reply_markup=menu_markups(user))
    return True

@bot.message_handler(commands=['ts'])
def ts(message):
    user = get_user(message)
    log(message, user)
    message_data = [i for i in message.text.split(" ") if i]
    if len(message_data) == 1:
        bot.send_message(user["id"],"–í—ã –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏ —Ñ–∞–º–∏–ª–∏—é —É—á–∏—Ç–µ–ª—è")
        return True
    data = database.select("teachers", ["subscribe", "name"], [["name","RLIKE",message_data[1]]])
    if not data:
        bot.send_message(user["id"],"–î–∞–Ω–Ω—ã–π —É—á–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return True
    data, name = json_loads(data[0][0]), data[0][1]
    if data is None:
        bot.send_message("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        return True
    if type(data) != type([]):
        bot.send_message("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        return True
    if user["id"] in data:
        bot.send_message(user["id"], f"–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ {name}")
        return True
    data.append(user["id"])
    database.update("teachers", {"subscribe": json.dumps(data, indent=2)}, [["name", "=", name]])
    bot.send_message(user["id"], f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É—á–∏—Ç–µ–ª—è {name}")
    return True

@bot.message_handler(commands=['tu'])
def tu(message):
    user = get_user(message)
    log(message, user)
    message_data = [i for i in message.text.split(" ") if i]
    if len(message_data) == 1:
        bot.send_message(user["id"],"–í—ã –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏ —Ñ–∞–º–∏–ª–∏—é —É—á–∏—Ç–µ–ª—è")
        return True
    data = database.select("teachers", ["subscribe", "name"], [["name","RLIKE",message_data[1]]])
    if not data:
        bot.send_message(user["id"],"–î–∞–Ω–Ω—ã–π —É—á–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return True
    data, name = json_loads(data[0][0]), data[0][1]
    if data is None:
        bot.send_message("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        return True
    if type(data) != type([]):
        bot.send_message("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        return True
    if user["id"] not in data:
        bot.send_message(user["id"], f"–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ {name}")
        return True
    data.remove(user["id"])
    database.update("teachers", {"subscribe": json.dumps(data, indent=2)}, [["name", "=", name]])
    bot.send_message(user["id"], f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É—á–∏—Ç–µ–ª—è {name}")
    return True

@bot.message_handler(content_types=['document'])
def document(message):
    user = get_user(message)
    teachers = database.select("config", ["data"], [["theme","=","teachers"]])
    if not teachers:
        print("Not teachers")
        return False
    teachers = json_loads(teachers[0][0])
    if type(teachers) != type({}):
        print("Type teachers != {}")
        return False
    teachers = [teachers[i] for i in teachers]
    if user["id"] not in teachers:
        return True
    file_name = message.document.file_name
    if not file_name.endswith(".xls"):
        bot.send_message(user["id"], "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–µ .xls!")
        return True
    file_name = file_name.replace(".xls", "")
    file_name_data = [i for i in file_name.split(" ") if i]
    if len(file_name_data) < 3:
        bot.send_message(user["id"], "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤! (3)")
        return True
    day = weekday(file_name_data[0].upper())
    if day in ["–í–°–Ø –ù–ï–î–ï–õ–Ø", None]:
        bot.send_messge(user["id"], "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä [–î–ï–ù–¨]!")
        return True
    edited = None
    if file_name_data[1].upper() not in ["EDITED", "STANDART", "EDIT", "–ò–ó–ú–ï–ù–ï–ù–ò–Ø", "–û–°–ù–û–í–ù–û–ï", "–°–¢–ê–ù–î–ê–†–¢–ù–û–ï", "–ò–ó–ú–ï–ù–ï–ù–ò–ï"]:
        bot.send_message(user["id"], "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä [–û–°–ù–û–í–ù–û–ï/–ò–ó–ú–ï–ù–ï–ù–ò–Ø]!")
        return True
    if file_name_data[1].upper() in ["EDITED", "EDIT", "–ò–ó–ú–ï–ù–ï–ù–ò–Ø", "–ò–ó–ú–ï–ù–ï–ù–ò–ï"]:
        edited = True
    else:
        edited = False
    is_classes = None
    if file_name_data[2].upper() not in ["CLASS", "CLASSES", "–ö–õ–ê–°–°", "–ö–õ–ê–°–°–´", "TEACHERS", "TEACHER", "TEACH", "–£–ß–ò–¢–ï–õ–Ø", "–£–ß–ò–¢–ï–õ–¨"]:
        bot.send_message(user["id"], "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä [–ö–õ–ê–°–°–´/–£–ß–ò–¢–ï–õ–Ø]!")
        return True
    if file_name_data[2].upper() in ["CLASS", "CLASSES", "–ö–õ–ê–°–°", "–ö–õ–ê–°–°–´"]:
        is_classes = True
    else:
        is_classes = False
    if not os.path.exists("Temp"):
        os.mkdir("Temp")
    if not os.path.exists(f"Temp/{user['id']}"):
        os.mkdir(f"Temp/{user['id']}")
    if not os.path.exists(f"Temp/{user['id']}/documents"):
        os.mkdir(f"Temp/{user['id']}/documents")
    try:
        file_path = bot.get_file(message.document.file_id).file_path
        urllib.request.urlretrieve(f'https://api.telegram.org/file/bot{config.TOKEN}/{file_path}', f"Temp/{user['id']}/{file_path}")
        bot.send_message(user["id"], "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")
    except Exception as err:
        bot.send_message(user["id"], f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {err}")
        print(err)
        return True
    try:
        if is_classes:
            excel_reader.read_classes(bot, user, f"Temp/{user['id']}/{file_path}", day, edited)
        else:
            excel_reader.read_teachers(bot, user, f"Temp/{user['id']}/{file_path}", day, edited)
    except Exception as err:
        print(f"Error in excel reader: {err}")
        bot.send_message(user["id"], f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:\n–£—á–∏—Ç–µ–ª—è:{not is_classes}\n–ò–∑–º–µ–Ω–µ–Ω–∏—è:{edited}\n–î–µ–Ω—å:{day}")
    try:
        os.remove(file_path)
    except:
        pass

def next_word(line):
    line = line.strip()
    space = line.find(" ")
    enter = line.find("\n")
    if line == "":
        return ("", "")
    if space == -1 and enter == -1:
        return (line, "")
    min = 1e10
    if space != -1 and min > space:
        min = space
    if enter != -1 and min > enter:
        min = enter
    return (line[0: min], line[min + 1:])

@bot.message_handler(commands=['python_command'])
def python_command(message):
    user = get_user(message)
    log(message, user)
    if user["status"] == "settings:commands:add":
        return MessageHandler.Settings.Commands.add(bot, message, user)
    elif user["status"] == "settings:commands:delete":
        return MessageHandler.Settings.Commands.delete(bot, message, user)
    answer = next_word(message.text)
    try:
        try:
            exec(answer[1])
        except Exception as e:
            print(e)
        try:
            bot.send_message(message.chat.id, e)
        except:
            pass
    except:
        try:
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω—è –∫–æ–¥–∞")
        except:
            pass


class MessageHandler:
    def menu(bot, message, user):
        if "–£–†–û–ö–ò" in message.text:
            return MessageHandler.Schedule.to_parall(bot, message, user)

        if "–ó–í–û–ù–ö–ò" in message.text:
            data = database.select('config', 'data', [['theme', '=', 'call_schedule']])
            if not data:
                bot.send_message(user["id"], "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á—à–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤")
            else:
                data = json_loads(data[0][0])
                if type(data) == type(list()):
                    answer = "<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤:\n</b>"
                    for i in range(len(data)):
                        answer += f"<b>{i + 1})</b> {data[i]} \n"
                    bot.send_message(user["id"], answer, parse_mode="HTML")
                else:
                    bot.send_message(user["id"], "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á—à–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤")
            return True
        if "–ö–ê–ù–ò–ö–£–õ–´" in message.text:
            data = database.select('config', 'data', [['theme','=','holidays']])
            if not data:
                bot.send_message(user["id"], "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á—à–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
            else:
                bot.send_message(user["id"], data[0][0], parse_mode="HTML")
            return True
        if "–ò–ù–§–û" in message.text:
            # bot.send_message(user["id"],"–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–º\n–ú–ë–û–£ '–ì–Æ–õ ‚Ññ86' –≥.–ò–∂–µ–≤—Å–∫–∞\n–ö–æ–ª–æ–≥–µ—Ä–º–∞–Ω—Å–∫–∏–º –§—ë–¥–æ—Ä–æ–º (@kologermit)\n–£—á–µ–±–Ω—ã–π –≥–æ–¥ 20/21")
            bot.send_message(user["id"],"–ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º:\n1. –£—Ä–æ–∫–∏ - –£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤\n2. –ó–≤–æ–Ω–∫–∏ - –£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤\n3. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ\n4. –ì–¥–µ —Ñ–∏–∑-—Ä–∞? - –£–∑–Ω–∞—Ç—å, –≥–¥–µ –±—É–¥–µ—Ç —Ñ–∏–∑-—Ä–∞ - –Ω–∞ —É–ª–∏—Ü–µ –∏–ª–∏ –≤ –∑–∞–ª–µ.\n\n–ö–æ–º–∞–Ω–¥—ã:\n1. /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n2. /restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n3. /info - –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ\n4. –ö–ª–∞—Å—Å–ë—É–∫–≤–∞ –î–µ–Ω—å–ù–µ–¥–µ–ª–∏ (10–∞ –≤—Ç–æ—Ä–Ω–∏–∫) - –£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–∞–∑—É –Ω–∞ –Ω—É–∂–Ω—ã–π –∫–ª–∞—Å—Å –∏ –¥–µ–Ω—å (–≤—Å—é –Ω–µ–¥–µ–ª—é)")
            return True
        if message.text.isdigit():
            if int(message.text) >= 5 and int(message.text) <= 11:
                classes = database.select("config", "data", [["theme", "=", "classes"]])
                if not classes:
                    bot.send_message(user["id"], "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
                    return True
                classes = json_loads(classes[0][0])
                bot.send_message(user["id"], "–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É:", reply_markup=markups([i for i in classes[str(int(message.text))]] + ["–ù–∞–∑–∞–¥üîô"]))
                user["settings"]["class_parallel"] = int(message.text)
                user_update(user, "schedule:symbol", json.dumps(user["settings"], indent=2))
                return True
        if len(message.text) == 2:
            if message.text[0].isdigit():
                if int(message.text[0]) >= 5: 
                    classes = database.select("config", "data", [["theme", "=", "classes"]])
                    if not classes:
                        bot.send_message(user["id"], "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
                        return True
                    classes = json_loads(classes[0][0])
                    if not classes or type(classes) != type({}):
                        bot.send_message(user["id"], "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
                        return True
                    if message.text[1] in classes[message.text[0]]:
                        user["settings"]["class_parallel"] = int(message.text[0])
                        message.text = message.text[-1]
                        return MessageHandler.Schedule.symbol(bot, message, user)
        elif len(message.text) == 3:
            if message.text[0:2].isdigit():
                if int(message.text[0:2]) >= 10 and int(message.text[0:2]) <= 11:
                    classes = database.select("config", "data", [["theme", "=", "classes"]])
                    if not classes:
                        bot.send_message(user["id"], "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
                        return True
                    classes = json_loads(classes[0][0])
                    if not classes or type(classes) != type({}):
                        bot.send_message(user["id"], "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
                        return True
                    if message.text[2] in classes[message.text[0:2]]:
                        user["settings"]["class_parallel"] = int(message.text[0:2])
                        message.text = message.text[-1]
                        return MessageHandler.Schedule.symbol(bot, message, user)

        message_data = [i for i in message.text.split(" ") if i]
        if len(message_data) == 2:
            data = is_class(message_data[0], database)
            day = weekday(message_data[1])
            if data and day:
                message.text = day
                user["settings"]["class_parallel"] = data["parallel"]
                user["settings"]["class_symbol"] = data["symbol"]
                return MessageHandler.Schedule.day(bot, message, user)

        if len(message_data) == 3:
            data = is_class(message_data[0], database)
            day = weekday(f"{message_data[1]} {message_data[2]}")
            if data and day:
                message.text = day
                user["settings"]["class_parallel"] = data["parallel"]
                user["settings"]["class_symbol"] = data["symbol"]
                return MessageHandler.Schedule.day(bot, message, user)

        if "–ì–î–ï –§–ö?" in message.text:
            bot.send_message(user["id"], get_weather.where_fizra(), parse_mode="HTML")
            return True

        if "–ù–ê–°–¢–†–û–ô–ö–ò" in message.text:
            return MessageHandler.Settings.to_main(bot, message, user)

    def to_menu(bot, message, user):
        bot.send_message(user["id"], "–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!", reply_markup=menu_markups(user))
        user_update(user, status="menu")
        return True

    class Schedule:
        def parallel(bot, message, user):
            if message.text.isdigit():
                if int(message.text) >= 5 and int(message.text) <= 11:
                    classes = database.select("config", "data", [["theme", "=", "classes"]])
                    if not classes:
                        bot.send_message(user["id"], "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
                        return True
                    classes = json_loads(classes[0][0])
                    bot.send_message(user["id"], "–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É:", reply_markup=markups([i for i in classes[str(int(message.text))]] + ["–ù–∞–∑–∞–¥üîô"]))
                    user["settings"]["class_parallel"] = int(message.text)
                    user_update(user, "schedule:symbol", json.dumps(user["settings"], indent=2))
                    return True
            elif "–ù–ê–ó–ê–î" in message.text:
                return MessageHandler.to_menu(bot, message, user)

        def to_parall(bot, message, user):
            bot.send_message(user["id"], "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å:", reply_markup=markups(["5", "6", "7", "8", "9", "10", "11", "–ù–∞–∑–∞–¥üîô"]))
            user_update(user, status="schedule:parallel")
            return True

        def symbol(bot, message, user):
            if len(message.text) == 1 and message.text in "–ê–ë–í–ì–î":
                bot.send_message(user["id"], "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=markups(["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í—Å—è –Ω–µ–¥–µ–ª—è", "–ù–∞–∑–∞–¥üîô"]))
                user["settings"]["class_symbol"] = message.text
                user_update(user, "schedule:day", json.dumps(user["settings"], indent=2))
                return True
            elif "–ù–ê–ó–ê–î" in message.text:
                return MessageHandler.Schedule.to_parall(bot, message, user)

        def day(bot, message, user):
            if weekday(message.text):
                message.text = weekday(message.text)
                data = database.select('schedule_classes', 'schedule', [['parallel','=',user['settings']['class_parallel']], ['symbol','=',user['settings']['class_symbol']]])
                if not data:
                    bot.send_message(user["id"], "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á—à–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
                else:
                    data = json_loads(data[0][0])
                    answer = ""
                    if type(data) == type(dict()):
                        if "–í–°–Ø –ù–ï–î–ï–õ–Ø" not in message.text:
                            answer = f"<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {user['settings']['class_parallel']}{user['settings']['class_symbol']} –Ω–∞ {message.text.lower()}:\n</b>"
                            for i in range(len(data['standart'][message.text])):
                                answer += f"<b>{i + 1})</b> {data['standart'][message.text][i]}\n"
                            if data["edited"].get(message.text):
                                answer += "\n<b>–ò–∑–º–µ–Ω–µ–Ω–∏—è:</b>\n"
                                for i in range(len(data["edited"][message.text])):
                                    answer += f"<b>{i + 1})</b> {data['edited'][message.text][i]}\n"
                            else:
                                answer += "\n<b>–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç</b>"
                        else:
                            answer = f"<b>–†–∞–ø–∏—Å–∞–Ω–∏–µ {user['settings']['class_parallel']}{user['settings']['class_symbol']} –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é:</b>\n"
                            for i in data["standart"]:
                                answer += f"<b>{i.capitalize()}:</b>\n"
                                for j in range(len(data["standart"][i])):
                                    answer += f"<b>{j + 1})</b> {data['standart'][i][j]}\n"
                                answer += "\n"
                            if data["edited"]:
                                answer += "<b>–ò–∑–º–µ–Ω–µ–Ω–∏—è:</b>\n"
                                for i in data["edited"]:
                                    answer += f"<b>{i.capitalize()}:</b>\n"
                                    for j in range(len(data["edited"][i])):
                                        answer += f"<b>{j + 2})</b> {data['edited'][i][j]}\n"
                                    answer += "\n"
                            else:
                                answer += "<b>–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç</b>"
                        bot.send_message(user["id"], answer, parse_mode="HTML", reply_markup=menu_markups(user))
                        user["settings"].pop("class_parallel")
                        user["settings"].pop("class_symbol")
                        user_update(user, "menu", json.dumps(user["settings"], indent=2))
                    else:
                        bot.send_message(user["id"], "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á—à–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
                return True
            elif "–ù–ê–ó–ê–î" in message.text:
                classes = database.select("config", "data", [["theme", "=", "classes"]])
                if not classes:
                    bot.send_message(user["id"], "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
                    return True
                classes = json_loads(classes[0][0])
                bot.send_message(user["id"], "–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É:", reply_markup=markups([i for i in classes[str(user["settings"]["class_parallel"])]] + ["–ù–∞–∑–∞–¥üîô"]))
                user_update(user, "schedule:symbol")
                return True

    class Settings:
        def to_main(bot, mesage, user):
            bot.send_message(user["id"], "–ö–∞–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å?", reply_markup=settings_markup)
            user_update(user, "settings")
            return True

        def main(bot, message, user):
            if "–ù–ê–ó–ê–î" in message.text:
                return MessageHandler.to_menu(bot, message, user)

            elif "–ü–û–î–ü–ò–°–ö–ê –ù–ê –†–ê–°–ü–ò–°–ê–ù–ò–ï" in message.text:
                return MessageHandler.Settings.Subscribe.to_main(bot, message, user)

            elif "–ò–ó–ë–†–ê–ù–ù–´–ï –ö–û–ú–ê–ù–î–´" in message.text:
                return MessageHandler.Settings.Commands.to_main(bot, message, user)
                

        class Subscribe:
            def to_main(bot, message, user):
                answer = ""
                if user["settings"]["subscribe"]:
                    answer += "–ö–ª–∞—Å—Å—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã:\n"
                    for i in range(len(user["settings"]["subscribe"])):
                        answer += f"{i + 1}. {user['settings']['subscribe'][i]}\n"
                else:
                    answer = "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–ª–∞—Å—Å—ã"
                bot.send_message(user["id"], answer, reply_markup=markups(["–î–æ–±–∞–≤–∏—Ç—å‚ûï", "–£–¥–∞–ª–∏—Ç—å‚ùå", "–ù–∞–∑–∞–¥üîô"]))
                user_update(user, "settings:subscribe")
                return True

            def main(bot, message, user):
                if "–ù–ê–ó–ê–î" in message.text:
                    return MessageHandler.Settings.to_main(bot, message, user)
                
                if "–î–û–ë–ê–í–ò–¢–¨" in message.text:
                    if user["settings"].get("subscribe"):
                        if len(user["settings"]["subscribe"]) >= 4:
                            bot.send_message(user["id"], "–ë–æ–ª—å—à–µ —á–µ—Ç—ã—Ä—ë—Ö –∫–ª–∞—Å—Å–æ–≤ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–ª—å–∑—è!")
                            return True
                    classes = database.select("config", "data", [["theme", "=", "classes"]])
                    if not classes:
                        bot.send_message(user["id"], "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
                        return True
                    classes = json_loads(classes[0][0])
                    if not classes or type(classes) != type({}):
                        bot.send_message(user["id"], "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
                        return True
                    data = []
                    for i in classes:
                        for j in classes[i]:
                            if f"{i}{j}" not in user["settings"]["subscribe"]:
                                data.append(f"{i}{j}")
                    data.append("–ù–∞–∑–∞–¥üîô")
                    bot.send_message(user["id"], "–ù–∞ –∫–∞–∫–æ–π –∫–ª–∞—Å—Å —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", reply_markup=markups(data))
                    user_update(user, "settings:subscribe:add")
                    return True

                if "–£–î–ê–õ–ò–¢–¨" in message.text:
                    if not user["settings"]["subscribe"]:
                        bot.send_message(user["id"], "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–ª–∞—Å—Å—ã!")
                        return True
                    bot.send_message(user["id"], "–û—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è?", reply_markup=markups(user["settings"]["subscribe"] + ["–ù–∞–∑–∞–¥üîô"]))
                    user_update(user, "settings:subscribe:delete")
                    return True

            def add(bot, message, user):
                if "–ù–ê–ó–ê–î" in message.text:
                    return MessageHandler.Settings.to_main(bot, message, user)

                if len(message.text) == 2:
                    if message.text[0].isdigit():
                        if int(message.text[0]) >= 5: 
                            classes = database.select("config", "data", [["theme", "=", "classes"]])
                            if not classes:
                                bot.send_message(user["id"], "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
                                return True
                            classes = json_loads(classes[0][0])
                            if not classes or type(classes) != type({}):
                                bot.send_message(user["id"], "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
                                return True
                            if message.text[1] in classes[message.text[0]] and message.text not in user["settings"]["subscribe"]:
                                bot.send_message(user["id"], f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ {message.text} –∫–ª–∞—Å—Å–∞", reply_markup=settings_markup)
                                user["settings"]["subscribe"].append(message.text)
                                user_update(user, "settings", json.dumps(user["settings"], indent=2))
                                schedule_class = database.select("schedule_classes", ["parallel", "symbol", "subscribe"], [["parallel", "=", int(message.text[:-1])], ["symbol", "=", message.text[-1]]])
                                if not schedule_class:
                                    return True
                                schedule_class = {
                                    "parallel": schedule_class[0][0],
                                    "symbol": schedule_class[0][1],
                                    "subscribe": json.loads(schedule_class[0][2])
                                }
                                schedule_class["subscribe"].append(user["id"])
                                database.update("schedule_classes", {"subscribe": json.dumps(schedule_class["subscribe"], indent=2)}, [["parallel", "=", schedule_class["parallel"]], ["symbol", "=", schedule_class["symbol"]]])
                                return True
                elif len(message.text) == 3:
                    if message.text[0:2].isdigit():
                        if int(message.text[0:2]) >= 10 and int(message.text[0:2]) <= 11:
                            classes = database.select("config", "data", [["theme", "=", "classes"]])
                            if not classes:
                                bot.send_message(user["id"], "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
                                return True
                            classes = json_loads(classes[0][0])
                            if not classes or type(classes) != type({}):
                                bot.send_message(user["id"], "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
                                return True
                            if message.text[2] in classes[message.text[0:2]] and message.text not in user["settings"]["subscribe"]:
                                bot.send_message(user["id"], f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ {message.text} –∫–ª–∞—Å—Å–∞", reply_markup=settings_markup)
                                user["settings"]["subscribe"].append(message.text)
                                user_update(user, "settings", json.dumps(user["settings"], indent=2))
                                schedule_class = database.select("schedule_classes", ["parallel", "symbol", "subscribe"], [["parallel", "=", int(message.text[:-1])], ["symbol", "=", message.text[-1]]])
                                if not schedule_class:
                                    return True
                                schedule_class = {
                                    "parallel": schedule_class[0][0],
                                    "symbol": schedule_class[0][1],
                                    "subscribe": json.loads(schedule_class[0][2])
                                }
                                schedule_class["subscribe"].append(user["id"])
                                database.update("schedule_classes", {"subscribe": json.dumps(schedule_class["subscribe"], indent=2)}, [["parallel", "=", schedule_class["parallel"]], ["symbol", "=", schedule_class["symbol"]]])
                                return True

            def delete(bot, message, user):
                if message.text in user["settings"]["subscribe"]:
                    user["settings"]["subscribe"].remove(message.text)
                    bot.send_message(user["id"], f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞–ø–∏—Å–∞–Ω–∏—è {message.text} –∫–ª–∞—Å—Å–∞", reply_markup=settings_markup)
                    user_update(user, "settings", json.dumps(user["settings"], indent=2))
                    schedule_class = database.select("schedule_classes", ["parallel", "symbol", "subscribe"], [["parallel", "=", int(message.text[:-1])], ["symbol", "=", message.text[-1]]])
                    if not schedule_class:
                        return True
                    schedule_class = {
                        "parallel": schedule_class[0][0],
                        "symbol": schedule_class[0][1],
                        "subscribe": json.loads(schedule_class[0][2])
                    }
                    if user["id"] in schedule_class["subscribe"]:
                        schedule_class["subscribe"].remove(user["id"])
                        database.update("schedule_classes", {"subscribe": json.dumps(schedule_class["subscribe"], indent=2)}, [["parallel", "=", schedule_class["parallel"]], ["symbol", "=", schedule_class["symbol"]]])
                    return True
                elif "–ù–ê–ó–ê–î" in message.text:
                    return MessageHandler.Settings.to_main(bot, message, user)
        
        class Commands:
            def to_main(bot, message, user):
                answer = ""
                if user["settings"]["commands"]:
                    answer += "–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                    for i in range(len(user["settings"]["commands"])):
                        answer += f"{i + 1}. {user['settings']['commands'][i]}\n"
                else:
                    answer = "–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"
                bot.send_message(user["id"], answer, reply_markup=markups(["–î–æ–±–∞–≤–∏—Ç—å‚ûï", "–£–¥–∞–ª–∏—Ç—å‚ùå", "–ù–∞–∑–∞–¥üîô"]))
                user_update(user, "settings:commands")
                return True
            def main(bot, message, user):
                if "–ù–ê–ó–ê–î" in message.text:
                    return MessageHandler.Settings.to_main(bot, message, user)
                
                if "–î–û–ë–ê–í–ò–¢–¨" in message.text:
                    if len(user["settings"]["commands"]) >= 10:
                        bot.send_message(user["id"], "–ë–æ–ª—å—à–µ –¥–µ—Å—è—Ç–∏ –∫–æ–º–∞–Ω–¥ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–ª—å–∑—è!")
                        return True
                    bot.send_message(user["id"], "–ö–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?", reply_markup=markups(["–ù–∞–∑–∞–¥üîô"]))
                    user_update(user, "settings:commands:add")
                    return True

                if "–£–î–ê–õ–ò–¢–¨" in message.text:
                    if not user["settings"]["commands"]:
                        bot.send_message(user["id"], "–£ –≤–∞—Å –Ω–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                        return True
                    bot.send_message(user["id"], "–ö–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?", reply_markup=markups(user["settings"]["commands"] + ["–ù–∞–∑–∞–¥üîô"]))
                    user_update(user, "settings:commands:delete")
                    return True

            def add(bot, message, user):
                if "–ù–ê–ó–ê–î" in message.text.upper():
                    return MessageHandler.Settings.Commands.to_main(bot, message, user)
                else:
                    bot.send_message(user["id"], f"–ö–æ–º–∞–Ω–¥–∞ {message.text} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞", reply_markup=settings_markup)
                    user["settings"]["commands"].append(message.text)
                    user_update(user, "settings", json.dumps(user["settings"], indent=2))
                    return True

            def delete(bot, message, user):
                if "–ù–ê–ó–ê–î" in message.text.upper():
                    return MessageHandler.Settings.Commands.to_main(bot, message, user)
                elif message.text in user["settings"]["commands"]:
                    bot.send_message(user["id"], f"–ö–æ–º–∞–Ω–¥–∞ {message.text} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞", reply_markup=settings_markup)
                    user["settings"]["commands"].remove(message.text)
                    user_update(user, "settings", json.dumps(user["settings"], indent=2))
                    return True

def update_connection():
    global is_exit
    while not is_exit:
        try:
            del database
            database = DB(mysql)
            time.sleep(2)
        except:
            pass

thread1 = Thread(target=update_connection)
thread1.start()

def today(last_day = False):
    now = datetime.now().weekday() + 1
    if now == 7:
        now = 6
    if last_day:
        now -= 1
    if now == 0:
        now = 6
    return now

def weekday_thread():
    global is_exit
    time_last = weekday(today())
    while not is_exit:
        if time_last == weekday(today(last_day=True)):
            last_day = weekday(today(last_day=True))
            schedule_classes = [{"parallel": i[0], "symbol": i[1], "schedule": json_loads(i[2])} for i in database.select("schedule_classes", ["parallel", "symbol", "schedule"])]
            schedule_teachers = [{"name": i[0], "schedule": json_loads(i[1])} for i in database.select("teachers", ["name", "schedule"])]
            for i in schedule_classes:
                parallel = i["parallel"]
                symbol = i["symbol"]
                schedule = i["schedule"]
                if schedule["edited"].get(last_day):
                    schedule["edited"].pop(last_day)
                    database.update("schedule_classes", {"schedule": json.dumps(schedule, indent=2)}, [["parallel", "=", parallel], ["symbol", "=", symbol]])
            for i in schedule_teachers:
                name = i["name"]
                if schedule["edited"].get(last_day):
                    schedule["edited"].pop(last_day)
                    database.update("teachers", {"schedule": json.dumps(schedule, indent=2)}, [["name", "=", name]])
            bot.send_message(847721936, f"–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ {last_day}")
        time_last = weekday(today())
        time.sleep(2)

thread2 = Thread(target=weekday_thread)
thread2.start()

import gmail
def gmail_thread():
    global is_exit
    while not is_exit:
        gmail.main()
thread3 = Thread(target=gmail_thread)
thread3.start()

@bot.message_handler(content_types=["text"])
def handle_text(message):
    print(f"{message.chat.id} {message.chat.first_name} |{message.text}|")
    message.text = message.text.strip().replace("  ", " ").replace("\t\t", "\t")
    user = get_user(message)
    if user["status"] not in ["settings:commands:add", "settings:commands:delete"]:
        message.text = message.text.upper()
    log(message, user)
    action = {
        "menu": MessageHandler.menu,
        "schedule:parallel": MessageHandler.Schedule.parallel,
        "schedule:symbol" : MessageHandler.Schedule.symbol,
        "schedule:day": MessageHandler.Schedule.day,
        "settings": MessageHandler.Settings.main,
        "settings:subscribe": MessageHandler.Settings.Subscribe.main,
        "settings:subscribe:add": MessageHandler.Settings.Subscribe.add,
        "settings:subscribe:delete": MessageHandler.Settings.Subscribe.delete,
        "settings:commands": MessageHandler.Settings.Commands.main,
        "settings:commands:add": MessageHandler.Settings.Commands.add,
        "settings:commands:delete": MessageHandler.Settings.Commands.delete
    }
    if action.get(user["status"]):
        try:
            if not action[user["status"]](bot, message, user):
                bot.send_message(user["id"], "–ù–µ –ø–æ–Ω—è–ª!")
        except Exception as err:
            print(err)
            bot.send_message(user["id"], "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    else:
        bot.send_message(user["id"], f"–°—Ç–∞—Ç—É—Å {user['status']} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return

if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True)
        except:
            sleep(0.3)